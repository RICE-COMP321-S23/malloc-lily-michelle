COMP 321 Project 5: Malloc
<Michelle Pang, yp29; Lily Gao, qg8>

---(Do not write lines of text that exceed the width of this line.)------------

DESIGN DESCRIPTION

<
Our allocator follows Method 3 to use "segregated free list" to keep track of 
free blocks. We used segregated free list in conjunction with linked list. We 
wrote struct "block_list" following the concept of doubly linked list, storing
its previous "block_list" and next "block_list". If we want to insert a free 
block, we will insert the free block at the beginning of the block list; and if
we want to remove a free block, we will locate the block and remove it. 
Insertion and removal are all similar to the procedure of doubly linked list.
The placement policy we used is first fit, and it is enforced by the function
"find_fit". find_fit searches block list from beginning, accesses each 
"block_list" in the doubly linked list, and choose first free block that fits.
Our allocator splits when after we place a block with a given size at the start
of a free block, the remainder's size is at least the minimum block size. Our 
allocator coalesces following the immediate coalescing policy: coalesce 
adjacent blocks each time free is called. If the block's previous block is 
freed, the block coalesces with previous block; if the block's next block is
freed, the block coalesces with next block; and if the block's previous and 
next block is freed, the block coalesces with both the previous and next block.
Our allocator's insertion policy for free blocks is LIFO (last-in-first-out),
insert freed block at the beginning of the free list, giving us simple and 
constant time insertion.
>

checkheap() DESCRIPTION

<
Firstly, we implemented checkblock() to ensure that given a pointer to a block
in memory, in addition to checking if the pointer is doubleword aligned and 
if the header matches with footer, we also checked if the block was free or 
not. 
If the block was free, then it would go to the proper segregated free list 
that we found using seg_index(), and iterate through every block until it 
eiter found the block in the free list or print a message to warn that the 
specific block was free but is not in the free list. If the block was not free, 
it would still go to the proper segregated free list and we check to see if the 
block was mistakenly put in the free list. If we find such block, we print 
an error message to warn. 

In checkheap, we checked every block in the heap by using checkblock. Then, if 
the input verbose is true, we would use a nested for-loop, in which the 
outer loop iterate through 0 to SEGSIZE and the inner loop iterate over each
block in the corresponding free list and print each one out, to print out the 
entire segregated free list. 
We also checked if any contiguous free block escaped coalescing 
by using a while loop with an nested if-statement, which iterate 
every heap list pointer and speficies that while it is not equal to its next 
pointer, and if the current heap list pointer is allocated but its next is not,
we print "Adjacent blocks are free and uncoalesced!" to warn. 
Next, we checked if the header and footer of a block given as input is 
consistent, which runs silently unless there is a mismatch between header 
and footer.
>


